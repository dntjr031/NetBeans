/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package com.projectstore.view;

import com.model.item.ItemDAO;
import com.model.item.ItemDTO;
import com.model.product.ProductDAO;
import com.model.product.ProductDTO;
import com.model.promgr.ProMgrDAO;
import com.model.promgr.ProMgrDTO;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author STU-03
 */
public class ProductGUI extends javax.swing.JFrame implements ActionListener {
    
    private DefaultTableModel productModel = new DefaultTableModel();
    private ProductDAO daoPro = new ProductDAO();
    private ProMgrDAO daoMgr = new ProMgrDAO();
    private ArrayList<ProductDTO> list = new ArrayList<>();
    private StoreMainGUI sm = null;
    private String[] colList = {"상품코드", "상품이름", "상품가격", "재고"};
    
    /**
     * Creates new form ProductGUI
     */
    public ProductGUI() {
        initComponents();
        init();
        addEvent();
    }
    
    ProductGUI(StoreMainGUI aThis) {
        this();
        this.sm = aThis;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btDelete = new javax.swing.JButton();
        btClose = new javax.swing.JButton();
        pl = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tfCode = new javax.swing.JTextField();
        tfPname = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tfquantity = new javax.swing.JTextField();
        tfSelPrice = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfAccCode = new javax.swing.JTextField();
        btInsert = new javax.swing.JButton();
        btCancle = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        tfInPrice1 = new javax.swing.JTextField();
        cbItemCode = new javax.swing.JComboBox<>();
        btAccSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("상품관리");
        setResizable(false);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        scroll.setViewportView(table);

        btDelete.setText("삭제");
        btDelete.setEnabled(false);

        btClose.setText("닫기");

        pl.setBorder(javax.swing.BorderFactory.createTitledBorder("상품등록 및 수정"));

        jLabel1.setText("상품코드");

        jLabel2.setText("상품명");

        jLabel3.setText("품목코드");

        jLabel4.setText("수량");

        jLabel6.setText("판매가격");

        jLabel5.setText("거래처코드");

        tfAccCode.setEditable(false);

        btInsert.setText("입고");

        btCancle.setText("취소");

        jLabel7.setText("입고가격");

        cbItemCode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "선택하세요" }));

        btAccSearch.setText("검색");

        javax.swing.GroupLayout plLayout = new javax.swing.GroupLayout(pl);
        pl.setLayout(plLayout);
        plLayout.setHorizontalGroup(
            plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(plLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btInsert)
                        .addGap(55, 55, 55)
                        .addComponent(btCancle))
                    .addGroup(plLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(tfAccCode, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAccSearch))
                    .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, plLayout.createSequentialGroup()
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfInPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(plLayout.createSequentialGroup()
                            .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(jLabel1))
                            .addGap(30, 30, 30)
                            .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfSelPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                    .addComponent(tfquantity)
                                    .addComponent(tfPname)
                                    .addComponent(tfCode))
                                .addComponent(cbItemCode, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))))
        );
        plLayout.setVerticalGroup(
            plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfPname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbItemCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfquantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfSelPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfInPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfAccCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btAccSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(plLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancle)
                    .addComponent(btInsert))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btDelete)
                        .addGap(125, 125, 125)
                        .addComponent(btClose))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btDelete)
                            .addComponent(btClose))
                        .addGap(0, 7, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAccSearch;
    private javax.swing.JButton btCancle;
    private javax.swing.JButton btClose;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btInsert;
    private javax.swing.JComboBox<String> cbItemCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel pl;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable table;
    public javax.swing.JTextField tfAccCode;
    private javax.swing.JTextField tfCode;
    private javax.swing.JTextField tfInPrice1;
    private javax.swing.JTextField tfPname;
    private javax.swing.JTextField tfSelPrice;
    private javax.swing.JTextField tfquantity;
    // End of variables declaration//GEN-END:variables
    
    private void init() {
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        
        try {
            comboItem();
            selectAll();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }
    
    private void addEvent() {
        btClose.addActionListener(this);
        btCancle.addActionListener(this);
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getSource() == table) {
                    setText();
                }
            }
        });
        btInsert.addActionListener(this);
        btAccSearch.addActionListener(this);
        btDelete.addActionListener(this);
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btClose) {
            dispose();
        } else if (e.getSource() == btCancle) {
            tfClear();
        } else if (e.getSource() == btInsert) {
            try {
                insert();
                tfClear();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            tfClear();
        } else if (e.getSource() == btAccSearch) {
            AccInfoGUI in = new AccInfoGUI(this);
            in.setVisible(true);
        }else if(e.getSource() == btDelete){
            try {
                productDelete();
                sm.searchAll();
                selectAll();
                tableListWidth();
                sm.panListReset();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
    
    private void tfClear() {
        tfAccCode.setText("");
        tfPname.setText("");
        tfCode.setText("");
        tfSelPrice.setText("");
        cbItemCode.setSelectedItem("선택하세요");
        tfquantity.setText("");
        tfInPrice1.setText("");
        
        tfPname.setEditable(true);
        tfCode.setEditable(true);
        tfSelPrice.setEditable(true);
        cbItemCode.setEditable(true);
        tfquantity.setEditable(true);
        tfInPrice1.setEditable(true);
        
        btInsert.setEnabled(true);
        btDelete.setEnabled(false);
    }
    
    private void setText() {
        int row = table.getSelectedRow();
        String str = (String) table.getValueAt(row, 0);
        
        try {
            list = daoPro.selectBycode(str);
            ProductDTO dto = list.get(0);
            
            tfCode.setText(dto.getPcode() + "");
            tfSelPrice.setText(dto.getPrice() + "");
            tfPname.setText(dto.getPname());
            tfquantity.setText(dto.getStock() + "");
            String itemCode = dto.getItem_code();
            ItemDAO daoItem = new ItemDAO();
            ItemDTO dtoItem = daoItem.selectByCode(itemCode);
            cbItemCode.setSelectedItem(dtoItem.getName());
            
            tfCode.setEditable(false);
            cbItemCode.setEditable(false);
            tfInPrice1.setEditable(true);
            
            btInsert.setEnabled(true);
            btDelete.setEnabled(true);
            
            System.out.println("row" + row + ", dto=" + dto);
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void insert() throws SQLException {
        String pcode = tfCode.getText();
        String accCode = tfAccCode.getText();
        String inprice = tfInPrice1.getText();
        
        String itemName = (String) cbItemCode.getSelectedItem();
        System.out.println("itmeName=" + itemName);
        ItemDAO daoItem = new ItemDAO();
        ItemDTO dtoItem = daoItem.selectByName(itemName);
        System.out.println("dto=" + dtoItem);
        String itemCode = dtoItem.getCode();
        System.out.println("itemcode=" + itemCode);
        
        String pName = tfPname.getText();
        String selPrice = tfSelPrice.getText();
        String quantity = tfquantity.getText();
        
        if (pcode == null || pcode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "상품코드를 입력해야 합니다.");
            return;
        }
        
        if (accCode == null || accCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "유통업체 코드를 입력해야 합니다.");
            return;
        }
        
        if (inprice == null || inprice.isEmpty()) {
            JOptionPane.showMessageDialog(this, "입고금액을 입력해야 합니다.");
            return;
        }
        
        if (itemCode == null || itemCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "품목코드를 입력해야 합니다.");
            return;
        }
        
        if (pName == null || pName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "상품명을 입력해야 합니다.");
            return;
        }
        
        if (selPrice == null || selPrice.isEmpty()) {
            JOptionPane.showMessageDialog(this, "판매금액을 입력해야 합니다.");
            return;
        }
        
        if (quantity == null || quantity.isEmpty()) {
            JOptionPane.showMessageDialog(this, "입고 개수를 입력해야 합니다.");
            return;
        }
        
        ProductDTO dtoPro = new ProductDTO();
        dtoPro.setItem_code(itemCode);
        dtoPro.setPcode(pcode);
        dtoPro.setPname(pName);
        dtoPro.setPrice(Integer.parseInt(selPrice));
        dtoPro.setStock(Integer.parseInt(quantity));
        
        ProMgrDTO dtoMgr = new ProMgrDTO();
        dtoMgr.setAccCode(accCode);
        dtoMgr.setPcode(pcode);
        dtoMgr.setPrice(Integer.parseInt(inprice));
        dtoMgr.setQuantity(Integer.parseInt(quantity));
        dtoMgr.setTotalPrice(Integer.parseInt(inprice) * Integer.parseInt(quantity));
        
        boolean check = daoPro.codeCheck(pcode);
        
        if (check == ProductDAO.INSERT) {
            productInsert(dtoMgr, dtoPro);
        } else {
            productStockUpdate(dtoMgr, dtoPro);
        }
        
        sm.searchAll();
        selectAll();
        tableListWidth();
    }
    
    private void productInsert(ProMgrDTO dtoMgr, ProductDTO dtoPro) throws SQLException {
        int n1 = daoPro.insert(dtoPro);
        int n2 = daoMgr.insert(dtoMgr);
        
        System.out.println("n1=" + n1 + ",n2" + n2);
        
        if (n1 > 0 && n2 > 0) {
            JOptionPane.showMessageDialog(this, "입고완료!");
        } else {
            JOptionPane.showMessageDialog(this, "입고실패!");
        }
    }
    
    private void productStockUpdate(ProMgrDTO dtoMgr, ProductDTO dtoPro) throws SQLException {
        int n1 = daoPro.stockUpdate(dtoPro);
        int n2 = daoMgr.insert(dtoMgr);
        
        System.out.println("n1=" + n1 + ",n2" + n2);
        
        if (n1 > 0 && n2 > 0) {
            JOptionPane.showMessageDialog(this, "입고완료!");
        } else {
            JOptionPane.showMessageDialog(this, "입고실패!");
        }
    }
    
    private void comboItem() throws SQLException {
        ItemDAO daoitem = new ItemDAO();
        ArrayList<ItemDTO> itemList;
        itemList = daoitem.selectAll();
        for (int i = 0; i < itemList.size(); i++) {
            System.out.println(itemList.get(i).getName());
            cbItemCode.addItem(itemList.get(i).getName());
        }
    }
    
    private void selectAll() throws SQLException {
        
        list = daoPro.searchAll();
        String[][] data = new String[list.size()][colList.length];
        for (int i = 0; i < list.size(); i++) {
            ProductDTO dto = list.get(i);
            
            data[i][0] = dto.getPcode();
            data[i][1] = dto.getPname() + "";
            data[i][2] = dto.getPrice() + "";
            data[i][3] = dto.getStock() + "";
        }
        productModel.setDataVector(data, colList);
        table.setModel(productModel);
        tableListWidth();
        
    }
    
    private void tableListWidth() {
        table.getColumnModel().getColumn(0).setPreferredWidth(10);
        table.getColumnModel().getColumn(2).setPreferredWidth(20);
        table.getColumnModel().getColumn(3).setPreferredWidth(10);
    }

    private void productDelete() throws SQLException {
        String pcode = tfCode.getText();
        if(pcode == null || pcode.isEmpty()){
            JOptionPane.showMessageDialog(this, "삭제할 상품을 클릭해야 합니다.");
            return;
        }
        
        int n = daoPro.deleteByPcode(pcode);
        System.out.println("n="+n);
        JOptionPane.showMessageDialog(this, "삭제완료");
    }
}
